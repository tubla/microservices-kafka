@page "/cart/{ProductId:int}"
@using EComm.Model

@inject HttpClient http
@inject IJSRuntime jsRuntime

<h3>Cart</h3>

<form>
    <div class="form-group mb-4">
        <label>Customer Name:</label>
        <input type="text" class="form-control" @bind="Order.CustomerName"/>
    </div>
    <div class="form-group mb-4">
        <label>Product Name:</label>
        <input type="text" class="form-control" @bind="Product.Name" />
    </div>
    <div class="form-group mb-4">
        <label>Quantity:</label>
        <input type="text" class="form-control" @bind="Order.Quantity" />
    </div>
    <input type="submit" class="btn btn-primary" value="Place Order" @onclick="CreateOrder" />
</form>

@code {

    [Parameter]
    public int ProductId { get; set; }
    public OrderEntity Order = new OrderEntity();
    public ProductEntity Product = new ProductEntity();

    protected override async Task OnInitializedAsync()
    {
        Order.ProductId = ProductId;
        Product = await http.GetFromJsonAsync<EComm.Model.ProductEntity>($"https://localhost:5000/api/products/{ProductId}");

        await base.OnInitializedAsync();
    }

    public async Task CreateOrder()
    {
        // When call the api without using Task.Run(), we never recieve a response from the api. => no idea why!!!
        var response = Task.Run(async () => await http.PostAsJsonAsync<OrderEntity>($"https://localhost:7000/api/orders/", Order));
        if (response.Result.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Order created!");
        }
    }

}
